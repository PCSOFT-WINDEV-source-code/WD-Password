#To edit and compare internal_properties, use WINDEV integrated tools.
#Internal properties refer to the properties of controls in windows, reports, etc.
info :
 name : COL_Password
 major_version : 28
 minor_version : 0
 type : 7
 description : ""
 subtype : 0
procedure_set :
 identifier : 0x16fa644a02bb2ffc
 internal_properties : CAAAAAgAAABGLu41kG7fjQV3iS4F72qmnKaNh5694reolNKIW0iw
 code_elements :
  type_code : 31
  p_codes :
   -
     internal_properties : CAAAAAgAAABDClkrZLuuMPt2vrbhabo6T0SNx4FsRkifIwNZuqJcHkTzoD53mE9L2oHA/KnmcJX4GQADBQfZvYOO8RQSYxkyM8oT+2CIjDBV59Lye3t5NMnHQTe7ElCBnxt39Bk71dPz6OIUiOREJcoxywXxSnd73UPgdEz2v1W7ZZDvGI70
     code : |1+
      CONSTANT
      	SALT = "JH3#GV(CFT"
      	NB_LOOPS = 512
      	CATEGORY_NONE = "<none>"
      	
      	FIL_PARAM = "param.ini"
      	
      	PARAM_AUTOLOCKVAL = "AUTOLOCKVAL"			// Automatic lock on inactivity (in seconds)
      	PARAM_DEFAULT_USER = "DEFUSR"		// Default user name
      	PARAM_VIEW_PWD_EDIT = "VISUMDP"			// Password visible in edit
      	PARAM_AUTH_MODE = "AUTHMODE"				// Authentication mode (MODE_AUTH_xxx constants below)
      	PARAM_PWD_ALWAYS = "PWDALWAYS"		// Type the main password at each minimization
      	PARAM_ERASEPP = "ERASEPP"				// Automatically erase the password from the clipboard
      	
      	MODE_UNDEFINED_AUTH = ""
      	MODE_PASS_AUTH = "pwd"
      	MODE_PATTERN_AUTH = "pattern"
      	
      	FIL_EXPORT = "passwords.xml"
      END
      
      STPassword is Structure
      	Label is string <mapping="StcPassword">
      	Username is string <mapping="UserName">
      	Password is string
      	Image is string
      	URL is string <mapping="URL">
      	Favorite is boolean  <mapping="Favorite">
      	CreationDate is datetime <mapping="CreationDate">
      	DateModification is datetime <mapping="ModificationDate">
      	LastAccessDate is datetime <mapping="AccessDate">
      	ExpirationDate is datetime <mapping="ExpirationDate">
      	Description is string <mapping="Description">
      	Category is string
      END
      
      gbDBIsAvailable is boolean = False
      gbufMainPassword is buffer
      
      InitParameter(paramIni,DirData()+FIL_PARAM)
     type : 720896
  procedures :
   -
     name : OpenDatabase
     procedure_id : 1655746082048323580
     type_code : 15
     code : |1+
      // Summary: Opens the HFSQL file of passwords
      // Syntax:
      //[ <Result> = ] OpenDatabase (<sMainPassword> is string)
      //
      // Parameters:
      //	sMainPassword (UNICODE string): Main password
      // Return value:
      // 	boolean: True if the file is opened or created, False otherwise
      //
      //	sHFSQLFilePath (UNICODE string - default value=""): Path that will be used to locate the HFSQL file (if empty string, uses the default path)
      PROCEDURE PUBLIC GLOBAL OpenDatabase(sMainPassword is string ) : boolean
      
      // Main password for encrypting the password stored in database
      gbufMainPassword = DeriveMainPassword(sMainPassword)
      
      // Password of HFSQL file
      sHFSQLPassword is string = DeriveHFSQLPassword(sMainPassword)
      
      // Open the HFSQL files
      nERR is int
      HChangeDir(Category,DirData())
      IF HOpen(Category,sHFSQLPassword)=False THEN
      	nERR = HError(hErrCurrent)
      	RESULT False
      END
      
      HChangeDir(Password,DirData())
      IF HOpen(Password,sHFSQLPassword)=False THEN
      	nERR = HError(hErrCurrent)
      	RESULT False
      END
      
      gbDBIsAvailable = True
      RESULT True
      
     type : 458752
   -
     name : DeriveMainPassword
     internal_properties : CAAAAAgAAACSHZ74l+YLgVREO9FmuBPaPcL2gt4V6fZmeIgZcbaKn1C1G4JJoAQhzpbSyPZUAWom3t77VmS5E9YymRaUgoSlhY7wvOCkG2akzM5ReZaVxmtQMO5i18RTIY7ZAdwZ+ZwIz+C0iXomUUXIw+wd9QjpzkTKZ1EqDSLFCqldMvriG5dZAaPAE1rHvRIkBLnFULFTLM+uYWo=
     procedure_id : 1655746082048389116
     type_code : 15
     code : |1+
      // Summary: <specify the action of the procedure>
      // Syntax:
      //[ <Result> = ] DeriveMainPassword (<sMainPassword> is string)
      //
      // Parameters:
      //	sMainPassword (UNICODE string): <specify the role of sMainPassword>
      // Return value:
      // 	buffer: // 	None
      //
      // Example:
      // Indicate an example.
      //
      PROCEDURE DeriveMainPassword( sMainPassword is string )
      
      buf0 is buffer = StringToUTF8(sMainPassword)
      bufPWD is buffer = StringToUTF8(sMainPassword)
      
      n is int = 1
      LOOP(NB_LOOPS)
      	bufPWD = HashString(HA_HMAC_MD5_128,bufPWD,buf0[[n]])
      	n++
      	IF n>Length(buf0) THEN
      		n = 1
      	END
      END
      
      dbgAssert(Length(bufPWD)=16)
      
      RESULT bufPWD
      
     type : 458752
   -
     name : DeriveHFSQLPassword
     procedure_id : 1655746082048454652
     type_code : 15
     code : |1+
      // Summary: <specify the action of the procedure>
      // Syntax:
      //[ <Result> = ] DeriveHFSQLPassword (<sMainPassword> is string)
      //
      // Parameters:
      //	sMainPassword (UNICODE string): <specify the role of sMainPassword>
      // Example:
      // Indicate an example.
      //
      // Return value:
      // 	variant: // 	None
      PROCEDURE DeriveHFSQLPassword( sMainPassword is string )
      
      // result sMainPassword
      
      buf0 is buffer = StringToUTF8(StringReverse(sMainPassword))
      bufPWD is buffer = StringToUTF8(sMainPassword)
      bufPWD = HashString(HA_SHA_256,bufPWD,buf0)
      
      RESULT Crypt(bufPWD,"",cryptNone)
     type : 458752
   -
     name : ChangeMainPassword
     procedure_id : 1655746082048520188
     type_code : 15
     code : |1-
      // Summary: <specify the action of the procedure>
      // Syntax:
      //[ <Result> = ] ChangeMainPassword (<sNewPwdInClear> is string)
      //
      // Parameters:
      //	sNewPwdInClear (UNICODE string): <specify the role of sNew>
      // Return value:
      // 	boolean: // 	None
      //
      // Example:
      // Indicate an example.
      //
      PROCEDURE ChangeMainPassword( sNewPwdInClear is string )
      
      HCancelDeclaration(QRY_ViewPassword)
      
      // Encrypts the passwords again
      FOR EACH Password 
      	bufLight is buffer = DecryptPassword(Password.Password)
      	Password.Password = Digit(bufLight,sNewPwdInClear)
      	HModify(Password)
      END
      
      sDir is string = CompleteDir(fDataDir())
      
      // Creates the new files
      _HChangePassword(Category,sNewPwdInClear)
      _HChangePassword(Password,sNewPwdInClear)
      
      // Closes the former files
      HClose(Category)
      HClose(Password)
      
      // Deletes the former files
      _DeleteFormerDatabase(sDir,Category)
      _DeleteFormerDatabase(sDir,Password)
      
      // Renames the new files
      _RenameFile(sDir,Category)
      _RenameFile(sDir,Password)
      
      // Re-opens the new database
      OpenDatabase(sNewPwdInClear)
      
      
      
      RESULT True
     type : 458752
   -
     name : DecryptPassword
     internal_properties : CAAAAAgAAABbcpoKL8GGVbXput/gxEgtDknvlEkn31t/dVu1A0vBimbTSTbJEIdAijZWL+3YZWynG23LiBnGO9h11cITi9Msj3PTl9Yt652rVAxNByHQh2WiN5Hzdcr/o8jWvdImLXtVXwrFRAjRMAjzT1Rpjd6ku1pW0vQqSiYX2HjN693UVw==
     procedure_id : 1655746082048585724
     type_code : 15
     code : |1+
      // Summary: <specify the action of the procedure>
      // Syntax:
      //[ <Result> = ] DecryptPassword (<buf> is buffer)
      //
      // Parameters:
      //	buf (buffer): <specify the role of buf>
      // Example:
      // Indicate an example.
      //
      // Return value:
      // 	buffer: // 	None
      PROCEDURE DecryptPassword( LOCAL buf is buffer )
      
      RESULT DecryptStandard(buf,gbufMainPassword,cryptAES128,cryptCBC,cryptPaddingPKCS)
      
     type : 458752
   -
     name : Digit
     internal_properties : CAAAAAgAAACrmciGxc/g7JHBCcQzxtOe10N8juc6oB2agpa3/dKawKGBRRxLem0SeUVGtBD0EShc/PAsw1HDDwA8STnFEyVOMeQi+MKE3bzUq4AQRyDB2ecq58gKkVsZ7IhSgxduU9u02YA7rjNO2fRQ2pYWrlaa9j40hiYNRRr6jtC9SxVuxgwZ+7mEBm9ncL9ZKh2NlO5j5VqiX7D3jwU1rAHTsj/ymZRSi2YulKaql2sGd4dZaJ90mA==
     procedure_id : 1655746082048651260
     type_code : 15
     code : |1+
      // Summary: <specify the action of the procedure>
      // Syntax:
      //[ <Result> = ] Encrypt (<bufMessage> is buffer [, <sMainNew> is string])
      //
      // Parameters:
      //	bufMessage (buffer): <specify the role of sClear>
      //	sMainNew (UNICODE string - default value=""): <specify the role of sMainNew>
      // Return value:
      // 	buffer: // 	None
      //
      // Example:
      // Indicate an example.
      //
      PROCEDURE Digit( LOCAL bufMessage is buffer , LOCAL sMainNew is string = "" )
      
      
      bufSecret is buffer = gbufMainPassword
      IF sMainNew<>"" THEN
      	bufSecret = DeriveMainPassword(sMainNew)
      END
      
      bufEncrypt is buffer = EnCryptStandard(bufMessage,bufSecret,cryptAES128,cryptCBC,cryptPaddingPKCS)
      
      dbgAssert(bufMessage=decryptStandard(bufEncrypt,bufSecret,cryptAES128,cryptCBC,cryptPaddingPKCS))
      
      RESULT bufEncrypt
     type : 458752
   -
     name : bFirstStartup
     procedure_id : 1655746082048716796
     type_code : 15
     code : |1+
      // Summary: <specify the action of the procedure>
      // Syntax:
      //[ <Result> = ] bFirstStart ()
      //
      // Parameters:
      //	None
      // Return value:
      // 	boolean: // 	None
      //
      // Example:
      // Indicate an example.
      //
      PROCEDURE bFirstStartup()
      
      // If the parameter that defines the authentication mode does not exist, it is the first start of the application
      RESULT (LoadParameter(PARAM_AUTH_MODE)="")
     type : 458752
   -
     name : CreateDatabase
     procedure_id : 1655746082048782332
     type_code : 15
     code : |1+
      // Summary: Opens the HFSQL file of passwords
      // Syntax:
      //[ <Result> = ] CreateDatabase (<sMainPassword> is string)
      //
      // Parameters:
      //	sMainPassword (UNICODE string): Main password
      // Return value:
      // 	boolean: True if the file is opened or created, False otherwise
      //
      //	sHFSQLFilePath (UNICODE string - default value=""): Path that will be used to locate the HFSQL file (if empty string, uses the default path)
      PROCEDURE PUBLIC GLOBAL CreateDatabase(sMainPassword is string ) : boolean
      
      // Main password for encrypting the password stored in database
      gbufMainPassword = DeriveMainPassword(sMainPassword)
      
      // Password of HFSQL file
      sHFSQLPassword is string = DeriveHFSQLPassword(sMainPassword)
      
      // Open the HFSQL file
      
      HChangeDir(Password,DirData())
      IF HCreation(Password,sHFSQLPassword)=False THEN
      	RESULT False
      END
      HChangeDir(Category,DirData())
      IF HCreation(Category,sHFSQLPassword)=False THEN
      	RESULT False
      END
      
      gbDBIsAvailable = True
      RESULT True
     type : 458752
   -
     name : bDatabaseIsAvailable
     procedure_id : 1655746082048847868
     type_code : 15
     code : |1+
      // Summary: <specify the action of the procedure>
      // Syntax:
      //[ <Result> = ] bDatabaseIsAvailable ()
      //
      // Parameters:
      //	None
      // Return value:
      // 	boolean: // 	None
      //
      // Example:
      // Indicate an example.
      //
      PROCEDURE bDatabaseIsAvailable()
      
      RESULT gbDBIsAvailable
     type : 458752
   -
     name : _HChangePassword
     internal_properties : CAAAAAgAAABmnqWWISaOrLz76IC+WAVpeZRalCYhygciYyLR/JCpxbE1uxi15uH2c7shm6RtWwF4m2bpnilFVdTaTfjuGTJLYihFhaM2GFfP4QIod8DtC5EvMnXbQRTalZf+ZuAjkb1mjkJLmnhA3mM3lsfNgT3rM7eKplKWkauf/3VPd9/A1cUsDYW8482ONSZFOZrS7Z1rpiyXcCJ1
     procedure_id : 1655746082048913404
     type_code : 15
     code : |1+
      // Summary: <specify the action of the procedure>
      // Syntax:
      //[ <Result> = ] _HChangPassword (<FileName>, <sNewPwdInClear>)
      //
      // Parameters:
      //	FileName: <specify the role of Category>
      //	sNewPwdInClear: <specify the role of sNewHFSQL>
      // Return value:
      // 	boolean: // 	None
      //
      // Example:
      // Indicate an example.
      //// Automatic process of errors:   run the block of code CASE ERROR
      //
      
      PROCEDURE _HChangePassword(filename,sNewPwdInClear)
      
      sDir is string = DirData()
      
      // Password of HFSQL file
      sNewHFSQL is string = DeriveHFSQLPassword(sNewPwdInClear)
      
      // Creates the new file
      sAlias is string = Lower(GetGUID(guidRough))
      HAlias(filename,sAlias)
      HChangeName(sAlias,filename..PhysicalName+"_temp")
      HChangeDir(sAlias,sDir)
      HCreation(sAlias,sNewHFSQL)
      FOR EACH filename
      	HCopyRecord(sAlias,filename,hCopyAutoId)
      	HAdd(sAlias,hSetIdAuto)
      END
      HClose(sAlias)
      
      RESULT True
      
      CASE Error:
      	RESULT False
     type : 458752
   -
     name : DirData
     procedure_id : 1655746082048978940
     type_code : 15
     code : |1+
      // Summary: <specify the action of the procedure>
      // Syntax:
      //[ <Result> = ] DataDir ()
      //
      // Parameters:
      //	None
      // Return value:
      // 	variant: // 	None
      //
      // Example:
      // Indicate an example.
      //
      PROCEDURE DirData()
      
      RESULT CompleteDir(fDataDir())
     type : 458752
   -
     name : _DeleteFormerDatabase
     internal_properties : CAAAAAgAAACzEmoFn05KYlvbZoJgp5bzVrfF3jkmluBoGK3FUHOM9sTPrzP4naFUv/GggDxQkTJWgJKwzxMCmT01xj/n0eddUA9aP7nG/Ve1f0L+sw4tp9Kx/bgJxnBQRZqeG1q78IpJSzu7b2rbQ+B36IhN12Mxm777tFc6RBa4wcJlooCxfSHHVO8TSfiv9kgVPpoi1artQBAscLqfsgY6mw8+8YVC4jdCkUTUllyFnTDLW0lymwzeFOBU
     procedure_id : 1655746082049044476
     type_code : 15
     code : |1-
      // Summary: <specify the action of the procedure>
      // Syntax:
      // _DeleteFormerDatabase (<sDir>, <FileName>)
      //
      // Parameters:
      // 	sDir: <specify the role of sDir>
      //	FileName: <specify the role of FileName>
      // Return value:
      // 	None
      //
      // Example:
      // Indicate an example.
      //
      PROCEDURE _DeleteFormerDatabase(sDir,filename)
      
      fDelete(sDir+filename..PhysicalName+".fic")
      IF fFileExist(sDir+filename..PhysicalName+".ndx") THEN fDelete(sDir+filename..PhysicalName+".ndx")
      IF fFileExist(sDir+filename..PhysicalName+".mmo") THEN fDelete(sDir+filename..PhysicalName+".mmo")
     type : 458752
   -
     name : _RenameFile
     internal_properties : CAAAAAgAAAA3luaJIyLexg/vYr6c06IvkuOwai8UTrLOCJmfVs+M7o7rTatKU2Ey9XnAqrocHVZ49PRsCdnCQzepRu0pEeN5irt840/gwWmDVz5IScJtF7BZswCnaFzCB2Z1+nN4vcs4RNwKCJMSCqOK5+PKOPi6ApuIV2T3l/0TXCHAxylOlvggPf78gk8GWTvQUe8T4kss/X3jmRMGFeWZLjZn/raHuQyG3QgIwghxiSzXr+XeB5hikGTQ
     procedure_id : 1655746082049110012
     type_code : 15
     code : |1-
      // Summary: <specify the action of the procedure>
      // Syntax:
      // _RenameFile (<sDir>, <FileName>)
      //
      // Parameters:
      // 	sDir: <specify the role of sDir>
      //	FileName: <specify the role of FileName>
      // Return value:
      // 	None
      //
      // Example:
      // Indicate an example.
      //
      PROCEDURE _RenameFile(sDir,filename)
      
      fRename(sDir+filename..PhysicalName+"_temp.fic",sDir+filename..PhysicalName+".fic")
      IF fFileExist(sDir+filename..PhysicalName+"_temp.ndx") THEN fRename(sDir+filename..PhysicalName+"_temp.ndx",sDir+filename..PhysicalName+".ndx")
      IF fFileExist(sDir+filename..PhysicalName+"_temp.mmo") THEN fRename(sDir+filename..PhysicalName+"_temp.mmo",sDir+filename..PhysicalName+".mmo")
     type : 458752
   -
     name : MainAuthenticationMode
     procedure_id : 1655746082049175548
     type_code : 15
     code : |1+
      // Summary: <specify the action of the procedure>
      // Syntax:
      //[ <Result> = ] MainAuthenticationMode ()
      //
      // Parameters:
      //	None
      // Return value:
      // 	variant: // 	None
      //
      // Example:
      // Indicate an example.
      //
      PROCEDURE MainAuthenticationMode()
      
      RESULT LoadParameter(PARAM_AUTH_MODE)
     type : 458752
   -
     name : ExportDatabase
     internal_properties : CAAAAAgAAABi4721K54e3c6OvxgHveNe2DUqdVonAciFr9oU6DUAL2ZvNamP25l4YbILeVB0FpGEj7HQemyjBlEJhmhtDCuu6wlRRmacgRD58gjjwfwBhlV6GTDjzmFCcJq/mKGUYZiFqujrwNWe1RruRl25
     procedure_id : 1655746082049241084
     type_code : 15
     code : |1+
      PROCEDURE ExportDatabase()
      
      bufExport is buffer
      stExport is STPassword
      arrExport is array of STPassword
      sExportFile is string = sExportPath()
      
      FOR EACH Password 
      	// Reads the record content
      	FileToMemory(stExport,Password)
      	// Transforms the category ID to string	
      	IF HReadSeekFirst(Category,CategoryID,Password.CategoryID) THEN
      		stExport.Category = Category.CategoryName
      	END
      	// Decrypts the password
      	stExport.Password = DecryptPassword(Password.Password)
      	// Encodes the image in base 64
      	stExport.Image = Crypt(Password.Picto,"",cryptNone)
      	Add(arrExport,stExport)
      END
      
      Serialize(stExport,bufExport,psdXML)	
      IF fSaveBuffer(sExportFile,bufExport)=False THEN
      	ToastDisplay(ErrorInfo(errMessage))
      END
      
      <COMPILE IF ConfigurationType=Android OR ConfigurationType=iOS>
      StartShare(shareDocument,sExportFile)
      <END>
     type : 458752
   -
     name : sExportPath
     procedure_id : 1655746082049306620
     type_code : 15
     code : |1+
      PROCEDURE sExportPath()
      
      IF InSimulatorMode() THEN
      	RESULT CompleteDir(fExeDir())+FIL_EXPORT
      END
      
      
      <SI CibleExécution=Android>
      	                   
      	RESULT CompleteDir(SysDirStorageCard())+FIL_EXPORT
      	
      <SINON>
      	
      	RESULT CompleteDir(fDataDir())+FIL_EXPORT
      	
      <FIN>
      
      
      
      
     type : 458752
   -
     name : CategoryName
     procedure_id : 1655746082049372156
     type_code : 15
     code : |1-
      // Summary: <specify the action of the procedure>
      // Syntax:
      //[ <Result> = ] CategoryName (<nCategoryID> is 8-byte int)
      //
      // Parameters:
      //	nCategoryID (8-byte integer): <specify the role of nCategoryID>
      // Return value:
      // 	Undefined type: // 	None
      //
      // Example:
      // Indicate an example.
      //
      PROCEDURE CategoryName(nCategoryID is 8-byte int)
      
      IF nCategoryID=0 _OR_ HReadSeekFirst(Category,CategoryID,nCategoryID)=False THEN
      	RESULT "<none>"
      END
      
      RESULT Category.CategoryName
     type : 458752
   -
     name : HasExpired
     internal_properties : CAAAAAgAAAAEv2BzLiovafiYF+nWlNueQfbmGq6B5SaCZKxx6TISk3yROwLpzPDxgvqWkL7YOY5iUj4jvsitI5qmFab0xgw5aRKYtDiwzzagyCL3P9QrWOnmRjhY7ZKxfxSPlxLHfx4O1Wb2P4AMN3u+SXI7+9b7BFLYqVf4+yDb2Ccb8FDYRTXfh8W2YaD968BC0lc77qPRI4lkv9Q=
     procedure_id : 1655746082049437692
     type_code : 15
     code : |1+
      // Summary: <specify the action of the procedure>
      // Syntax:
      //[ <Result> = ] HasExpired (<dtExpirationDate>)
      //
      // Parameters:
      //	dtExpirationDate: <specify the role of dtExpirationDate>
      // Return value:
      // 	boolean: // 	None
      //
      // Example:
      // Indicate an example.
      //
      PROCEDURE HasExpired(dtExpirationDate)
      
      // If datetime is not specified, the password does not expire
      IF DateTimeValid(dtExpirationDate)=False THEN 
      	RESULT False
      END
      
      RESULT (dtExpirationDate<SysDateTime())
     type : 458752
  procedure_templates : []
  property_templates : []
 code_parameters :
  internal_properties : CAAAAAgAAACVGQgYbalU7DKC3oH4ItDrjtcTHXXV/EuH8q0IbhyQlw==
  original_name : COL_SansNom1
resources :
 string_res :
  identifier : 0x10069f4c30056f0f
  internal_properties : CAAAAAgAAACm76HWfKGWp33VjXInA4cRlqArlgTTA862QGt72W2ld5Y=
custom_note :
 internal_properties : CAAAAAgAAABtB9HWVzrXO2+4NDRVK0vmzaNKrCKqH1DBX30lMmGZ
